// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  cartItems     CartItem[]
  adyenSessions AdyenSession[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  category    String
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
  cartItems   CartItem[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  status    String   @default("PENDING")
  total     Float
  subtotal  Float
  tax       Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items     OrderItem[]
  payment   OrderPayment?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model CartItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model AdyenSession {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  orderId     String   @unique
  sessionId   String   @unique
  sessionData String
  amount      Float
  currency    String
  countryCode String
  expiresAt   DateTime
  reference   String
  returnUrl   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OrderPayment {
  id                   String   @id @default(cuid())
  orderId              String   @unique // One-to-one relationship with Order
  order                Order    @relation(fields: [orderId], references: [id])
  merchantAccountCode  String   // From webhook: merchantAccountCode
  merchantReference    String   // From webhook: merchantReference (should match orderId)
  checkoutSessionId    String?  // From webhook: additionalData.checkoutSessionId
  paymentMethod        String   // From webhook: paymentMethod
  pspReference         String   @unique // From webhook: pspReference (Adyen's unique payment reference)
  reason               String?  // From webhook: reason
  success              Boolean  // From webhook: success (converted from string "true"/"false")
  eventCode            String   // From webhook: eventCode (e.g., "AUTHORISATION")
  amount               Float    // From webhook: amount.value (convert from cents)
  currency             String   // From webhook: amount.currency
  eventDate            DateTime // From webhook: eventDate
  rawWebhookData       String   // Full webhook JSON for debugging
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([pspReference])
  @@index([merchantReference])
}

 